//
//  AddPostViewController.swift
//  Project
//
//  Created by Gianluca Lo Vecchio on 26/5/18.
//  Copyright Â© 2018 DAM. All rights reserved.
//

import UIKit
import FirebaseStorage
import FirebaseDatabase
import FirebaseAuth
import Firebase
import Photos

class AddPostViewController: UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate{
    var postingImage : UIImageView?
    /*var user = Auth.auth().currentUser;
     var data: NSData!
     var ref: DatabaseReference!
     @IBOutlet weak var imageView: UIImageView!
     
     @IBOutlet weak var descField: UITextField!
     @IBAction func AddPost(_ sender: Any) {
     uploadPhoto()
     }
     @IBAction func uploadPost(_ sender: Any) {
     uploadPost(data: data)
     }
     */
    @IBOutlet fileprivate var captureButton: UIButton!
    var user = Auth.auth().currentUser!;
    var data: NSData!
    var ref: DatabaseReference!
    var username = ""
    @IBOutlet weak var descOutlet: UITextField!
    
    ///Displays a preview of the video output generated by the device's cameras.
    @IBOutlet fileprivate var capturePreviewView: UIView!
    
    @IBOutlet weak var imageview: UIImageView!
    ///Allows the user to put the camera in photo mode.
    @IBOutlet fileprivate var photoModeButton: UIButton!
    @IBOutlet fileprivate var toggleCameraButton: UIButton!
    @IBOutlet fileprivate var toggleFlashButton: UIButton!
    
    ///Allows the user to put the camera in video mode.
    @IBOutlet fileprivate var videoModeButton: UIButton!
    
    let cameraController = CameraController()
    
    
    
    @IBOutlet weak var toEditOutlet: UIButton!
    
    override var prefersStatusBarHidden: Bool { return true }
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.isNavigationBarHidden = true
    }
    override func viewDidLoad() {
        descOutlet.isEnabled = false
        descOutlet.isHidden = true
        captureButton.isEnabled = true
        captureButton.isHidden = false
        toEditOutlet.isHidden = true
        toEditOutlet.isEnabled = false
        func configureCameraController() {
            cameraController.prepare {(error) in
                if let error = error {
                    print(error)
                }
                
                try? self.cameraController.displayPreview(on: self.capturePreviewView)
                
            }
        }
        
        
        func styleCaptureButton() {
            //captureButton.layer.borderColor = UIColor.black.cgColor
            //captureButton.layer.borderWidth = 2
            
            //captureButton.layer.cornerRadius = min(captureButton.frame.width, captureButton.frame.height) / 2
        }
        
        styleCaptureButton()
        configureCameraController()
        
    }
    
    
    @IBAction func toEdit(_ sender: Any) {
        descOutlet.isEnabled = false
        descOutlet.isHidden = true
        captureButton.isEnabled = true
        captureButton.isHidden = false
        toEditOutlet.isHidden = true
        toEditOutlet.isEnabled = false
        self.imageview.isHidden = true
        uploadPost()
        
    }
    func randomString(len:Int) -> String {
        let charSet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
        var c = Array(charSet)
        var s:String = ""
        for n in (1...10) {
            s.append(c[Int(arc4random()) % c.count])
        }
        return s
    }
    func uploadPost(){
        loadUser()
        
        data = UIImagePNGRepresentation(imageview.image!)! as NSData
        
        //let imageData = NSData(contentsOfFile: localPath!)!
        
        let storage = Storage.storage()
        let storageRef = storage.reference()
        let postRef = storageRef.child("posts/\(randomString(len: 25)).jpg")
        let uploadTask = postRef.putData(data as Data, metadata: nil) { (metadata, error) in
            guard let metadata = metadata else {
                return
            }
            
            let downloadURL = metadata.downloadURL()?.absoluteString
            
            
            self.ref = Database.database().reference()
            
            self.ref = Database.database().reference()
            self.ref.child("users/\(self.user.uid)/posts").child("post\(self.randomString(len: 25))").setValue(["photo_url": downloadURL, "desc": self.descOutlet.text, "username":self.username, "uid":self.user.uid, "likes": 0, "isLast": true])
        }
        tabBarController?.selectedIndex = 0
        
    }
    func loadUser() {
        Database.database().reference().child("users").child(user.uid).observeSingleEvent(of: .value, with: { (snapshot) in
            
            let value = snapshot.value as? NSDictionary
            self.username = value?["username"] as? String ?? ""
            
            
        }) { (error) in
            print(error.localizedDescription)
        }
    }
    @IBAction func toggleFlash(_ sender: UIButton) {
        if cameraController.flashMode == .on {
            cameraController.flashMode = .off
            toggleFlashButton.setImage(#imageLiteral(resourceName: "Flash Off Icon"), for: .normal)
        }
            
        else {
            cameraController.flashMode = .on
            toggleFlashButton.setImage(#imageLiteral(resourceName: "Flash On Icon"), for: .normal)
        }
    }
    @IBAction func switchCameras(_ sender: UIButton) {
        do {
            try cameraController.switchCameras()
        }
            
        catch {
            print(error)
        }
        
        switch cameraController.currentCameraPosition {
        case .some(.front):
            toggleCameraButton.setImage(#imageLiteral(resourceName: "Front Camera Icon"), for: .normal)
            
        case .some(.rear):
            toggleCameraButton.setImage(#imageLiteral(resourceName: "Rear Camera Icon"), for: .normal)
            
        case .none:
            return
        }
    }
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        self.view.endEditing(true)
    }
    @IBAction func captureImage(_ sender: UIButton) {
        cameraController.captureImage {(image, error) in
            guard let image = image else {
                print(error ?? "Image capture error")
                return
            }
            
            
            try? PHPhotoLibrary.shared().performChangesAndWait {
                PHAssetChangeRequest.creationRequestForAsset(from: image)
                
            }
            self.descOutlet.isEnabled = true
            self.descOutlet.isHidden = false
            self.captureButton.isEnabled = false
            self.captureButton.isHidden = true
            self.toEditOutlet.isHidden = false
            self.toEditOutlet.isEnabled = true
            self.imageview.image = image
            self.imageview.isHidden = false
        }
        //tabBarController?.selectedIndex = 0
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

}


